Eigenanatomy comparison of control and MCI cortical thickness
================================================================


library(ANTsR)
library(boot)
tem<-antsImageRead('data/template_brain.nii.gz',3)
bm<-antsImageRead('data/brain_mask.nii.gz',3)
mask <- getMask("data/maskgb.nii.gz")
mat <- as.matrix( antsImageRead( 'data/thicknesspt25new.mha' ,2 ) )
subjin<-read.csv('data/subjid_sg.csv')[1:nrow(mat),]
ncon<-48
nmci<-nrow(mat)-ncon
basedir<-'eigenanatomy'
####################
its<-4
nvecs<-10 # 0
usp<-( -0.1 )
vsp<-0.1
ii<-0
cl<-50
basedire<-paste(basedir,ii,'/',sep='')
dir.create(file.path("./", basedire), showWarnings = FALSE)
mydecom<-sparseDecom( (mat), mask,  sparseness=vsp, nvecs=nvecs, its=its, cthresh=cl, statdir=basedire,smooth=0.5, z=usp)
dx<-c(rep(0,ncon),rep(1,nmci))
decom1<-mydecom$umatrix
decom2<-imageListToMatrix( mydecom$eigenanatomyimages, mask)
myproj<-mat %*% t( decom2 )
colnames(myproj)<-paste("V",1:ncol(myproj),sep='')
ct<-1
for ( x in mydecom$eigenanatomyimages ) 
  {
  if ( ct < (ncol(myproj)+1) ) 
    {
    vec<-x[ mask == 1 ]
    vec<-abs( vec )
    vec<-vec/sum(vec)
    wavg<-( mat %*% vec )
    myproj[ ,ct]<-( wavg )
    ct<-ct+1
    }
  }

####################################################
# use the networks in prediction                   #
####################################################
subb<-myproj[,c(1:5)]
subj<-data.frame( cbind(subjin,dx,subb) )
myform<-paste("dx~",paste(colnames(subb),collapse='+'))
mdl<-glm( as.formula(myform), data=subj, family="binomial")
dd<-0
for ( i in 1:100 ) dd<-dd+cv.glm(subj, mdl,K=10)$delta[1]*0.01
print( dd )

####################################################
###     perform a t-test on the networks         ###
####################################################
pv<-rep(NA, ncol(myproj) ) 
for ( i in 1:ncol(myproj) )
  {
  pv[i]<-t.test( myproj[1:ncon,i],myproj[(ncon+1):nrow(myproj),i] )$p.value
  print( paste("p-value",i,pv[i]   ))
  }
qv<-(p.adjust(pv,method='holm'))

####################################################
# describe the significant networks                #
####################################################
if ( ! exists("mymni") ) {
  mymni<-list( antsImageRead(getANTsRData('mni'),3), 
            antsImageRead(getANTsRData('mnib'),3), 
            antsImageRead(getANTsRData('mnia'),3) )
  }

mysig<-which(  qv < 0.05 )
brain<-renderSurfaceFunction( surfimg =list( bm ) , alphasurf=0.1 , smoothsval = 1.5  )
id<-par3d("userMatrix")
rid<-rotate3d( id , -pi/2, 1, 0, 0 )
par3d(userMatrix = rid )
for ( i in mysig )
  {
  mytem<-lappend( list(tem), mydecom$eigenanatomyimages[[ i ]] )
  signifnetworkdescriptor<-getMultivariateTemplateCoordinates(  mytem, mymni , convertToTal = TRUE , pvals = pv[ i ] , threshparam = 0 , identifier = i )
  print( signifnetworkdescriptor$network )
  f<-mydecom$eigenanatomyimages[[ i ]]
  brain<-renderSurfaceFunction( surfimg =list( bm ) , alphasurf=0.1 , smoothsval = 1.5  )
  plotBasicNetwork( centroids =  getCentroids( f , clustparam = 250, threshparam = 0  ) , brain )
  rgl.snapshot( paste('network',i,'.png',sep='') , fmt="png", top=TRUE )
  }

if ( 1 == 0 ) {
demog<-data.frame( cbind(subjin,dx) , outcome=factor(dx) )
rows.train  <- sample(1:nrow(demog), floor(nrow(demog) * 0.5), replace=FALSE)
input.train <- mat[rows.train, ]
input.test  <- mat[-rows.train, ]
demog.train <- demog[rows.train, ]
demog.test  <- demog[-rows.train, ]
result <- regressProjections(input.train, input.test, demog.train, demog.test, 
                             eigenvectors=mydecom$eigenanatomyimages, mask=mask, "outcome",model.function=svm)
mydxerr<-sum(abs(round(c(result$out$pred))-c(result$out$real)))
print( mydxerr /(  nrow(demog) - length( rows.train ) ) ) 
}
